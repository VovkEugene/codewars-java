package kyu6;

import static java.util.Arrays.stream;

/**
 * Равные стороны массива
 * <p>
 * Допустим, вам дан массив {1,2,3,4,3,2,1}:
 * Ваша функция вернет индекс 3,
 * поскольку в третьей позиции массива сумма левой части индекса ({1,2,3})
 * и сумма правой части индекса ({3,2,1}) оба равны 6.
 * <p>
 * Давайте посмотрим на еще один.
 * Вам дан массив {1,100,50,-51,1,1}:
 * Ваша функция вернет индекс 1,
 * поскольку в первой позиции массива сумма левой части индекса ({1})
 * и сумма правой части индекса ({50,-51,1, 1}) оба равны 1.
 * <p>
 * Последний:
 * Вам дан массив {20,10,-80,10,10,15,35}
 * В индексе 0 левая часть равна {}
 * Правая часть – {10,-80,10,10,15,35}.
 * Они оба при сложении равны 0. (Пустые массивы в этой задаче равны 0)
 * Индекс 0 — это место, где левая и правая стороны равны.
 * <p>
 * Примечание. Помните, что в большинстве языков индекс массива начинается с 0.
 * <p>
 * Вход
 * Целочисленный массив длиной 0 < arr < 1000.
 * Числа в массиве могут быть любыми
 * целыми положительными или отрицательными числами.
 * <p>
 * Выход
 * Наименьший индекс N, при котором сторона слева от N равна стороне справа от N.
 * Если вы не найдете индекс, соответствующий этим правилам, вы вернете -1.
 * <p>
 * Примечание
 * Если вам дан массив с несколькими ответами, верните наименьший правильный индекс.
 */
public class EqualSidesOfArray {
    public static void main(String[] args) {
        System.out.println(findEvenIndex(new int[]{1, 2, 3, 4, 3, 2, 1}));
        System.out.println(findEvenIndex(new int[]{1, 100, 50, -51, 1, 1}));
        System.out.println(findEvenIndex(new int[]{1, 2, 3, 4, 5, 6}));
        System.out.println(findEvenIndex(new int[]{20, 10, 30, 10, 10, 15, 35}));
        System.out.println(findEvenIndex(new int[]{-8505, -5130, 1926, -9026}));
        System.out.println(findEvenIndex(new int[]{2824, 1774, -1490, -9084, -9696, 23094}));
        System.out.println(findEvenIndex(new int[]{4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4}));
    }

    public static int findEvenIndex(int[] arr) {
        int sum = stream(arr).sum();
        int counterSum = 0;

        for (int i = 0; i < arr.length; i++) {
            if (counterSum == sum - arr[i]) {
                return i;
            }

            counterSum += arr[i];
            sum -= arr[i];
        }

        return -1;
    }
}
